{"ast":null,"code":"// Redux Reducer Function\nexport const reducer = (state, action) => {\n  if (action.type == 'INCREMENT') {\n    return {\n      ...state,\n      count: state.count + 1\n    };\n  }\n  if (action.type == 'DECREMENT') {\n    return {\n      ...state,\n      count: state.count - 1\n    };\n  }\n  if (action.type == 'reset') {\n    return {\n      ...state,\n      count: 0\n    };\n  }\n  if (action.type == 'incrementIfOdd') {\n    return {\n      ...state,\n      count: state.count % 2 !== 0 ? state.count + 1 : state.count\n    };\n  }\n  if (action.type == 'setCounter') {\n    return {\n      ...state,\n      count: Number(action.payload['count'])\n    };\n  }\n  return state;\n};","map":{"version":3,"mappings":"AAMA;AACA,OAAO,MAAMA,OAAO,GAAG,CAACC,KAAY,EAAEC,MAAc,KAAW;EAC3D,IAAIA,MAAM,CAACC,IAAI,IAAI,WAAW,EAAE;IAC9B,OAAO;MAAE,GAAGF,KAAK;MAAEG,KAAK,EAAEH,KAAK,CAACG,KAAK,GAAG;IAAC,CAAE;;EAE7C,IAAIF,MAAM,CAACC,IAAI,IAAI,WAAW,EAAE;IAC9B,OAAO;MAAE,GAAGF,KAAK;MAAEG,KAAK,EAAEH,KAAK,CAACG,KAAK,GAAG;IAAC,CAAE;;EAE7C,IAAIF,MAAM,CAACC,IAAI,IAAI,OAAO,EAAE;IAC1B,OAAO;MAAE,GAAGF,KAAK;MAAEG,KAAK,EAAE;IAAC,CAAE;;EAE/B,IAAIF,MAAM,CAACC,IAAI,IAAI,gBAAgB,EAAE;IACnC,OAAO;MACL,GAAGF,KAAK;MACRG,KAAK,EAAEH,KAAK,CAACG,KAAK,GAAG,CAAC,KAAK,CAAC,GAAGH,KAAK,CAACG,KAAK,GAAG,CAAC,GAAGH,KAAK,CAACG;KACxD;;EAEH,IAAIF,MAAM,CAACC,IAAI,IAAI,YAAY,EAAE;IAC/B,OAAO;MAAE,GAAGF,KAAK;MAAEG,KAAK,EAAEC,MAAM,CAACH,MAAM,CAACI,OAAO,CAAC,OAAO,CAAC;IAAC,CAAE;;EAE7D,OAAOL,KAAK;AAChB,CAAC","names":["reducer","state","action","type","count","Number","payload"],"sourceRoot":"","sources":["E:\\oneSchool\\angularApp\\todoredux\\src\\app\\+state\\reducer.ts"],"sourcesContent":["import { Action } from './actions';\r\n\r\nexport interface State {\r\n  count: number;\r\n}\r\n\r\n// Redux Reducer Function\r\nexport const reducer = (state: State, action: Action): State => {\r\n    if (action.type == 'INCREMENT') {\r\n      return { ...state, count: state.count + 1 };\r\n    }\r\n    if (action.type == 'DECREMENT') {\r\n      return { ...state, count: state.count - 1 };\r\n    }\r\n    if (action.type == 'reset') {\r\n      return { ...state, count: 0 };\r\n    }\r\n    if (action.type == 'incrementIfOdd') {\r\n      return {\r\n        ...state,\r\n        count: state.count % 2 !== 0 ? state.count + 1 : state.count,\r\n      };\r\n    }\r\n    if (action.type == 'setCounter') {\r\n      return { ...state, count: Number(action.payload['count']) };\r\n    }\r\n    return state;\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}